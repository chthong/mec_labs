#   Copyright 2023 OAI-MEP Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#   Contact: netsoft@eurecom.fr

openapi: 3.0.1
info:
  title: OAI Multi-access Edge Computing Platform
  description: "Multi-access Edge Computing platforms (MEP) is a part of the ETSI\
    \ MEC architecture. Our implementation of MEC platform allows different MEC applications\
    \ to discover MEP hosted services and register their own service which can be\
    \ discovered by other MEC applications. OAI MEP follows ETSI GS MEC 003 V3.1.1,\
    \ MEC appications communicate with MEP via `mp1` interface and MEP communicate\
    \ with Radio Access Network and Core Network components via `mp2` interface. This\
    \ swagger defines the discovery and registry service of MEP."
  contact:
    email: netsoft@eurecom.fr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Understand more about MEP internals
  url: https://gitlab.eurecom.fr/oai/orchestration/oai-mec/oai-mep
servers:
- url: http://localhost/v1
paths:
  /register:
    post:
      summary: Register a new service
      operationId: add_service
      requestBody:
        description: Service object that needs to be added to the registry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        "201":
          description: Service added correctly
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        "405":
          description: Invalid input
          content: {}
        "409":
          description: Resource with the same identifier already exists
          content: {}
      x-codegen-request-body-name: service
      x-openapi-router-controller: oai_mep.controllers.mep
  /register/{serviceId}:
    delete:
      summary: Deregister a service
      operationId: delete_service
      parameters:
      - name: serviceId
        in: path
        description: Id of the service to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Sucessfully deleted
          content: {}
        "400":
          description: 'Invalid ID/URIsupplied '
          content: {}
        "404":
          description: Service not found
          content: {}
      x-openapi-router-controller: oai_mep.controllers.mep
  /discover:
    get:
      summary: Lists all registered services
      description: Returns all the available services
      operationId: get_services
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
                x-content-type: application/json
      x-openapi-router-controller: oai_mep.controllers.mep
  /discover/{serviceType}:
    get:
      summary: Find services belonging to the requested category
      description: 'Returns a list of services which belongs to a certain category '
      operationId: get_services_by_type
      parameters:
      - name: serviceType
        in: path
        description: Type of services to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
                x-content-type: application/json
        "400":
          description: Invalid serviceType supplied
          content: {}
      x-openapi-router-controller: oai_mep.controllers.mep
components:
  schemas:
    Service:
      required:
      - endpoints
      - host
      - name
      - path
      - port
      - type
      type: object
      properties:
        sid:
          type: string
          description: the service identifier within the registry service
        name:
          type: string
          description: The service name
          example: ffmpeg-image-encoder
        type:
          minLength: 1
          type: string
          description: What category of service is provided. The value must be a standard
            value from the specification.
          enum:
          - AVEncoding
          - SigProc
          - Traffic
          - ML
          - ImgProc
          - VidProc
          - Compression
          - RadioNetworkInformation
          - LocalisationAPI
          - TrafficAPI
        host:
          type: string
          description: The app fqdn dns name
          example: ffmpegmediaencoder.mep.eurecom.fr
        port:
          type: integer
          description: The port to which the service is listenting to
          example: 7898
        path:
          type: string
          description: The path to consume the service
          example: /v1/video
        endpoints:
          type: array
          xml:
            name: endpoints
            wrapped: true
          items:
            $ref: '#/components/schemas/Endpoint'
        description:
          type: string
          description: A brief description of what the service does.
      example:
        path: /v1/video
        endpoints:
        - path: /transcode
          method: GET
          name: name
          description: description
          parameters:
          - name: input_file
            type: binary
        port: 7898
        name: ffmpeg-image-encoder
        host: ffmpegmediaencoder.mep.eurecom.fr
        description: description
        type: AVEncoding
        sid: sid
    Endpoint:
      required:
      - method
      - name
      - path
      type: object
      properties:
        name:
          type: string
        path:
          type: string
          description: The path to consume the service
          example: /transcode
        parameters:
          type: array
          xml:
            name: parameters
            wrapped: true
          items:
            $ref: '#/components/schemas/Param'
        method:
          type: string
          description: "If the field is not present, the service is exposed with more\
            \ then one endpoint, then refer to its documentation"
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - DELETE
          - CONNECT
          - OPTIONS
          - TRACE
          - PATH
        description:
          type: string
          description: A brief description of what the endpoint does.
      example:
        path: /transcode
        method: GET
        name: name
        description: description
        parameters:
        - name: input_file
          type: binary
    Param:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          description: Describes which data type the service provider is expecting
            for this parameter
          enum:
          - binary
          - json
          - integer
          - string
          - ipv4
          - ipv6
          - mac
          - uri
          - date
      example:
        name: input_file
        type: binary
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string