#   Copyright 2023 OAI-MEP Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#   Contact: netsoft@eurecom.fr

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from oai_mep.models.base_model_ import Model
from oai_mep.utils import util


class Param(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, type: str=None):  # noqa: E501
        """Param - a model defined in Swagger

        :param name: The name of this Param.  # noqa: E501
        :type name: str
        :param type: The type of this Param.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type'
        }
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Param':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Param of this Param.  # noqa: E501
        :rtype: Param
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Param.


        :return: The name of this Param.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Param.


        :param name: The name of this Param.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this Param.

        Describes which data type the service provider is expecting for this parameter  # noqa: E501

        :return: The type of this Param.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Param.

        Describes which data type the service provider is expecting for this parameter  # noqa: E501

        :param type: The type of this Param.
        :type type: str
        """
        allowed_values = ["binary", "json", "integer", "string", "ipv4", "ipv6", "mac", "uri", "date"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type