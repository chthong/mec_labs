# Copyright Â© 2023 the MEP-OAI Authors

# Licensed under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License. 
# API Version: 0.0.1
# Contact: netsoft@eurecom.fr

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from oai_rnis.models.base_model_ import Model
from oai_rnis.models.ca_reconf_subscription_filter_criteria_assoc import CaReconfSubscriptionFilterCriteriaAssoc  # noqa: F401,E501
from oai_rnis.models.ca_reconf_subscription_links import CaReconfSubscriptionLinks  # noqa: F401,E501
from oai_rnis.models.time_stamp import TimeStamp  # noqa: F401,E501
from oai_rnis.utils import util


class CaReconfSubscription(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, links: CaReconfSubscriptionLinks=None, callback_reference: str=None, expiry_deadline: TimeStamp=None, filter_criteria_assoc: CaReconfSubscriptionFilterCriteriaAssoc=None, subscription_type: str=None):  # noqa: E501
        """CaReconfSubscription - a model defined in Swagger

        :param links: The links of this CaReconfSubscription.  # noqa: E501
        :type links: CaReconfSubscriptionLinks
        :param callback_reference: The callback_reference of this CaReconfSubscription.  # noqa: E501
        :type callback_reference: str
        :param expiry_deadline: The expiry_deadline of this CaReconfSubscription.  # noqa: E501
        :type expiry_deadline: TimeStamp
        :param filter_criteria_assoc: The filter_criteria_assoc of this CaReconfSubscription.  # noqa: E501
        :type filter_criteria_assoc: CaReconfSubscriptionFilterCriteriaAssoc
        :param subscription_type: The subscription_type of this CaReconfSubscription.  # noqa: E501
        :type subscription_type: str
        """
        self.swagger_types = {
            'links': CaReconfSubscriptionLinks,
            'callback_reference': str,
            'expiry_deadline': TimeStamp,
            'filter_criteria_assoc': CaReconfSubscriptionFilterCriteriaAssoc,
            'subscription_type': str
        }

        self.attribute_map = {
            'links': '_links',
            'callback_reference': 'callbackReference',
            'expiry_deadline': 'expiryDeadline',
            'filter_criteria_assoc': 'filterCriteriaAssoc',
            'subscription_type': 'subscriptionType'
        }
        self._links = links
        self._callback_reference = callback_reference
        self._expiry_deadline = expiry_deadline
        self._filter_criteria_assoc = filter_criteria_assoc
        self._subscription_type = subscription_type

    @classmethod
    def from_dict(cls, dikt) -> 'CaReconfSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CaReconfSubscription of this CaReconfSubscription.  # noqa: E501
        :rtype: CaReconfSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self) -> CaReconfSubscriptionLinks:
        """Gets the links of this CaReconfSubscription.


        :return: The links of this CaReconfSubscription.
        :rtype: CaReconfSubscriptionLinks
        """
        return self._links

    @links.setter
    def links(self, links: CaReconfSubscriptionLinks):
        """Sets the links of this CaReconfSubscription.


        :param links: The links of this CaReconfSubscription.
        :type links: CaReconfSubscriptionLinks
        """

        self._links = links

    @property
    def callback_reference(self) -> str:
        """Gets the callback_reference of this CaReconfSubscription.

        URI selected by the service consumer to receive notifications on the subscribed RNIS information. This shall be included both in the request and in response.  # noqa: E501

        :return: The callback_reference of this CaReconfSubscription.
        :rtype: str
        """
        return self._callback_reference

    @callback_reference.setter
    def callback_reference(self, callback_reference: str):
        """Sets the callback_reference of this CaReconfSubscription.

        URI selected by the service consumer to receive notifications on the subscribed RNIS information. This shall be included both in the request and in response.  # noqa: E501

        :param callback_reference: The callback_reference of this CaReconfSubscription.
        :type callback_reference: str
        """
        if callback_reference is None:
            raise ValueError("Invalid value for `callback_reference`, must not be `None`")  # noqa: E501

        self._callback_reference = callback_reference

    @property
    def expiry_deadline(self) -> TimeStamp:
        """Gets the expiry_deadline of this CaReconfSubscription.


        :return: The expiry_deadline of this CaReconfSubscription.
        :rtype: TimeStamp
        """
        return self._expiry_deadline

    @expiry_deadline.setter
    def expiry_deadline(self, expiry_deadline: TimeStamp):
        """Sets the expiry_deadline of this CaReconfSubscription.


        :param expiry_deadline: The expiry_deadline of this CaReconfSubscription.
        :type expiry_deadline: TimeStamp
        """

        self._expiry_deadline = expiry_deadline

    @property
    def filter_criteria_assoc(self) -> CaReconfSubscriptionFilterCriteriaAssoc:
        """Gets the filter_criteria_assoc of this CaReconfSubscription.


        :return: The filter_criteria_assoc of this CaReconfSubscription.
        :rtype: CaReconfSubscriptionFilterCriteriaAssoc
        """
        return self._filter_criteria_assoc

    @filter_criteria_assoc.setter
    def filter_criteria_assoc(self, filter_criteria_assoc: CaReconfSubscriptionFilterCriteriaAssoc):
        """Sets the filter_criteria_assoc of this CaReconfSubscription.


        :param filter_criteria_assoc: The filter_criteria_assoc of this CaReconfSubscription.
        :type filter_criteria_assoc: CaReconfSubscriptionFilterCriteriaAssoc
        """
        if filter_criteria_assoc is None:
            raise ValueError("Invalid value for `filter_criteria_assoc`, must not be `None`")  # noqa: E501

        self._filter_criteria_assoc = filter_criteria_assoc

    @property
    def subscription_type(self) -> str:
        """Gets the subscription_type of this CaReconfSubscription.

        Shall be set to \"CaReconfSubscription\".  # noqa: E501

        :return: The subscription_type of this CaReconfSubscription.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type: str):
        """Sets the subscription_type of this CaReconfSubscription.

        Shall be set to \"CaReconfSubscription\".  # noqa: E501

        :param subscription_type: The subscription_type of this CaReconfSubscription.
        :type subscription_type: str
        """
        if subscription_type is None:
            raise ValueError("Invalid value for `subscription_type`, must not be `None`")  # noqa: E501

        self._subscription_type = subscription_type
